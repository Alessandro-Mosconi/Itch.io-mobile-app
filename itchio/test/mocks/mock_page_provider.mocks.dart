// Mocks generated by Mockito 5.4.4 from annotations
// in itchio/test/mock_page_provider.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:flutter/material.dart' as _i3;
import 'package:itchio/providers/page_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPageProvider extends _i1.Mock implements _i2.PageProvider {
  MockPageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get selectedIndex => (super.noSuchMethod(
        Invocation.getter(#selectedIndex),
        returnValue: 0,
      ) as int);

  @override
  bool get isExtraPageVisible => (super.noSuchMethod(
        Invocation.getter(#isExtraPageVisible),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setSelectedIndex(int? index) => super.noSuchMethod(
        Invocation.method(
          #setSelectedIndex,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushExtraPage(_i3.Widget? page) => super.noSuchMethod(
        Invocation.method(
          #pushExtraPage,
          [page],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setExtraPage(_i3.Widget? page) => super.noSuchMethod(
        Invocation.method(
          #setExtraPage,
          [page],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goBack() => super.noSuchMethod(
        Invocation.method(
          #goBack,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool canGoBack() => (super.noSuchMethod(
        Invocation.method(
          #canGoBack,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void clearExtraPage() => super.noSuchMethod(
        Invocation.method(
          #clearExtraPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToIndexWithPage(
    int? index,
    _i3.Widget? page,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #navigateToIndexWithPage,
          [
            index,
            page,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetToInitialState() => super.noSuchMethod(
        Invocation.method(
          #resetToInitialState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
