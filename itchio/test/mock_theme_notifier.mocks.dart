// Mocks generated by Mockito 5.4.4 from annotations
// in itchio/test/mock_theme_notifier.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:flutter/material.dart' as _i2;
import 'package:flutter/services.dart' as _i8;
import 'package:itchio/providers/theme_notifier.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:shared_preferences/shared_preferences.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeThemeData_0 extends _i1.SmartFake implements _i2.ThemeData {
  _FakeThemeData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [ThemeNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeNotifier extends _i1.Mock implements _i3.ThemeNotifier {
  MockThemeNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set prefs(_i4.SharedPreferences? prefs) => super.noSuchMethod(
        Invocation.setter(
          #prefs,
          prefs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get currentTheme => (super.noSuchMethod(
        Invocation.getter(#currentTheme),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#currentTheme),
        ),
      ) as String);

  @override
  _i2.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i2.ThemeMode.system,
      ) as _i2.ThemeMode);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangePlatformBrightness() => super.noSuchMethod(
        Invocation.method(
          #didChangePlatformBrightness,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ThemeData getLightThemeData(String? theme) => (super.noSuchMethod(
        Invocation.method(
          #getLightThemeData,
          [theme],
        ),
        returnValue: _FakeThemeData_0(
          this,
          Invocation.method(
            #getLightThemeData,
            [theme],
          ),
        ),
      ) as _i2.ThemeData);

  @override
  _i2.ThemeData getDarkThemeData(String? theme) => (super.noSuchMethod(
        Invocation.method(
          #getDarkThemeData,
          [theme],
        ),
        returnValue: _FakeThemeData_0(
          this,
          Invocation.method(
            #getDarkThemeData,
            [theme],
          ),
        ),
      ) as _i2.ThemeData);

  @override
  _i2.ThemeData getThemeData() => (super.noSuchMethod(
        Invocation.method(
          #getThemeData,
          [],
        ),
        returnValue: _FakeThemeData_0(
          this,
          Invocation.method(
            #getThemeData,
            [],
          ),
        ),
      ) as _i2.ThemeData);

  @override
  void setTheme(String? theme) => super.noSuchMethod(
        Invocation.method(
          #setTheme,
          [theme],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setThemeMode(_i2.ThemeMode? mode) => super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [mode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> didPopRoute() => (super.noSuchMethod(
        Invocation.method(
          #didPopRoute,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  bool handleStartBackGesture(_i8.PredictiveBackEvent? backEvent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleStartBackGesture,
          [backEvent],
        ),
        returnValue: false,
      ) as bool);

  @override
  void handleUpdateBackGestureProgress(_i8.PredictiveBackEvent? backEvent) =>
      super.noSuchMethod(
        Invocation.method(
          #handleUpdateBackGestureProgress,
          [backEvent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCommitBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCommitBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCancelBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCancelBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> didPushRoute(String? route) => (super.noSuchMethod(
        Invocation.method(
          #didPushRoute,
          [route],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> didPushRouteInformation(
          _i2.RouteInformation? routeInformation) =>
      (super.noSuchMethod(
        Invocation.method(
          #didPushRouteInformation,
          [routeInformation],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  void didChangeMetrics() => super.noSuchMethod(
        Invocation.method(
          #didChangeMetrics,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeTextScaleFactor() => super.noSuchMethod(
        Invocation.method(
          #didChangeTextScaleFactor,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeLocales(List<_i7.Locale>? locales) => super.noSuchMethod(
        Invocation.method(
          #didChangeLocales,
          [locales],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeAppLifecycleState(_i7.AppLifecycleState? state) =>
      super.noSuchMethod(
        Invocation.method(
          #didChangeAppLifecycleState,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i7.AppExitResponse> didRequestAppExit() => (super.noSuchMethod(
        Invocation.method(
          #didRequestAppExit,
          [],
        ),
        returnValue:
            _i6.Future<_i7.AppExitResponse>.value(_i7.AppExitResponse.exit),
      ) as _i6.Future<_i7.AppExitResponse>);

  @override
  void didHaveMemoryPressure() => super.noSuchMethod(
        Invocation.method(
          #didHaveMemoryPressure,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeAccessibilityFeatures() => super.noSuchMethod(
        Invocation.method(
          #didChangeAccessibilityFeatures,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
